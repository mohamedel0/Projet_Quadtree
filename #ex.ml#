
 *)
type colors = White | Black ;;

(**
  The sum type representing the region quadtree with:
  {ul {- [Plain] the empty rquadtree that will be drawn in black or white}
      {- [RQ] a node of the rquadtree}}
  Each [RQ] contains 4 children of {!type:Rquadtree.rquadtree}.
 *)
type rquadtree =
    Plain of colors
  | RQ of rquadtree * rquadtree * rquadtree * rquadtree;;

let rec intersection rquadtree1 rquadtree2 =
  match (rquadtree1, rquadtree2) with
    | (RQ (q11, q12, q13, q14), RQ (q21, q22, q23, q24)) -> RQ (intersection q11 q21, intersection q12 q22, intersection q13 q23,intersection q14 q24)
    | (Plain Black, RQ (q1, q2, q3, q4)) | (RQ (q1, q2, q3, q4), Plain Black) -> RQ ((intersection (Plain Black) q1), (intersection (Plain Black) q3),
        (intersection (Plain Black) q3), (intersection (Plain Black) q4))
    | (Plain Black, Plain Black) -> Plain Black *)
type colors = White | Black ;;

(**
  The sum type representing the region quadtree with:
  {ul {- [Plain] the empty rquadtree that will be drawn in black or white}
      {- [RQ] a node of the rquadtree}}
  Each [RQ] contains 4 children of {!type:Rquadtree.rquadtree}.
 *)
type rquadtree =
    Plain of colors
  | RQ of rquadtree * rquadtree * rquadtree * rquadtree;; *)
type colors = White | Black ;;

(**
  The sum type representing the region quadtree with:
  {ul {- [Plain] the empty rquadtree that will be drawn in black or white}
      {- [RQ] a node of the rquadtree}}
  Each [RQ] contains 4 children of {!type:Rquadtree.rquadtree}.
 *)
type rquadtree =
    Plain of colors
  | RQ of rquadtree * rquadtree * rquadtree * rquadtree;;
;;

(**
  Return the rquadtree result of the union of two given rquadtree.
  If one pixel of the union rquadtree is black then this pixel is black
  in the first or the second given rquadtree.
 *)
Â²let rec union rquadtree1 rquadtree2 =
  match (rquadtree1, rquadtree2) with
    | (RQ (q11, q12, q13, q14), RQ (q21, q22, q23, q24)) ->
      let res = RQ (union q11 q21, union q12 q22, union q13 q23, union q14 q24)
      in (match res with
        | RQ (Plain Black, Plain Black, Plain Black, Plain Black) -> Plain Black
        | _ -> res)
    | (Plain White, RQ (q1, q2, q3, q4)) | (RQ (q1, q2, q3, q4), Plain White) ->
      RQ ((union (Plain White) q1), (union (Plain White) q3),
        (union (Plain White) q3), (union (Plain White) q4))
    | (Plain White, Plain White) -> Plain White
    | _ -> Plain Black;;